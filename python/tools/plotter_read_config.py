import argparse
import glob
import os
import sys

class ExtractedConfiguration:
    """
    A wrapper object that contains every information extracted form the passed configuration files and the arguments
    """
    def __init__(self):
        self.opt_list = []
        self.ref_opt = None
        self.sort_opt = None
        self.plot_type = None
        self.files_to_read = {}
        self._opt_shorten_names = {}  # Used to shorten the path of opt sequences given by the user
        self.plot_config = {}
        self.opt_of_interest = None

    def read_config_file(self, config_file):
        with open(config_file) as f:
            for line in f.readlines():
                line = line.strip()
                if line == "":
                    continue

                equals_position = line.find("=")
                if equals_position == -1:
                    continue

                opt_name = line[0:equals_position - 1]
                path = line[equals_position + 2:]

                if opt_name == "*":
                    self.add_every_json_from_stared_string(path)
                else:
                    self.add_every_json_from(opt_name, path)

    def add_every_json_from(self, opt_name, folder):
        files_to_append = glob.glob(os.path.join(os.path.abspath(folder), "*.json"))
        if opt_name not in self.files_to_read:
            self.files_to_read[opt_name] = files_to_append
            self.opt_list.append(opt_name)
        else:
            self.files_to_read[opt_name].extend(files_to_append)

    def add_every_json_from_stared_string(self, starred_string):
        first_star_index = str(os.path.abspath(starred_string)).find("*")
        folders = glob.glob(os.path.abspath(starred_string))

        remaining_characters = len(os.path.abspath(starred_string)) - (first_star_index + 1)

        for folder in folders:
            if not os.path.isdir(folder):
                continue

            if remaining_characters == 0:
                opt_name = folder[first_star_index:]
            else:
                opt_name = folder[first_star_index:-remaining_characters]

            self.add_every_json_from(opt_name, folder)

    def append_independent_repertories(self, folders_list):
        common_path = os.path.commonpath(folders_list)

        # If a config file was inputted, we add a prefix symbol to differentiate the sequences inputted from the config
        # file with the
        added_prefix = "$" if len(self.opt_list) != 0 else ""

        # Register every folder renaming
        for actual_folder in folders_list:
            self._opt_shorten_names[actual_folder] = added_prefix + actual_folder[len(common_path):]
            self.add_every_json_from(self._opt_shorten_names[actual_folder], actual_folder)

    def fill_opts(self, ref_opt, sort_opt):
        if len(self.opt_list) == 0:
            return False

        def affect_ref(a):
            if a is None:
                self.ref_opt = self.opt_list[0]
            else:
                self.ref_opt = a

        def affect_sort(a):
            if a is None:
                self.sort_opt = self.opt_list[-1]
            else:
                self.sort_opt = a

        affect_ref(self.normalize(ref_opt))
        affect_sort(self.normalize(sort_opt))

        return True

    def normalize(self, opt_name):
        if opt_name in self._opt_shorten_names:
            return self._opt_shorten_names[opt_name]
        else:
            return opt_name

    def set_opt_list(self, opt_list):
        self.opt_list = opt_list

    @staticmethod
    def replace_variables(opt_name, str):
        return str.replace("$OPT_NAME", opt_name)


def _build_arg_parse():
    arg_parser = argparse.ArgumentParser(description="Draws plots using the json files generated by llvm-lit.")

    arg_parser.add_argument("-c", "--config",
                            help="Configuration file where are specified the path to the json files (see README for"
                                 " format).")
    arg_parser.add_argument(dest='folders', action="append", nargs='*', help="Folders to explore")
    arg_parser.add_argument("-i", "--optofinterest",
                            help="Defines a list of passes sequences of interest in a string with the format a,b,c. "
                                 "When specified, every other results will be ignored.")
    arg_parser.add_argument("-t", "--type", choices=['bar', 'plot', 'time_plot'], help="Plot type", required=True)
    arg_parser.add_argument("-r", "--reference",
                            help="Reference optimization for speed up. If not specified, the reference will be the "
                                 "first optimization sequence of the list (default : the first one)")
    arg_parser.add_argument("-s", "--sort_reference", help="Reference optimization to sort for scattered plot. "
                                                           "(default : the last one)")

    arg_parser.add_argument("-o", "--output", help="If defined, the graph will be outputted in the given file")
    arg_parser.add_argument("-d", "--disable-display", action="store_true",
                            help="If defined, the graph will not be displayed")

    arg_parser.add_argument("--plotbottom", type=float, default=0.5,
                            help="In plot graph, the minimal speedup displayed")
    arg_parser.add_argument("--plottop", type=float, default=5.0,
                            help="In plot graph, the maximal speedup displayed")

    arg_parser.add_argument("-m", "--min", type=float, default=None,
                            help="Minimum execution time of benchmarks (benchmarks shorter than that will be exluded)")

    return arg_parser


def extract_args():
    arg_parser = _build_arg_parse()
    parsed_args = arg_parser.parse_args()

    extracted_configuration = ExtractedConfiguration()

    if parsed_args.config is not None:
        extracted_configuration.read_config_file(parsed_args.config)

    if len(parsed_args.folders) != 0 and len(parsed_args.folders[0]) != 0:
        print(parsed_args.folders, file=sys.stderr)
        extracted_configuration.append_independent_repertories(parsed_args.folders[0])

    if parsed_args.optofinterest is not None:
        extracted_configuration.set_opt_list(parsed_args.optofinterest.split(','))

    if not extracted_configuration.fill_opts(parsed_args.reference, parsed_args.sort_reference):
        print("The passed arguments don't point to any json file")
        exit(0)

    extracted_configuration.plot_type = parsed_args.type
    extracted_configuration.plot_config = {'bot': parsed_args.plotbottom, 'top': parsed_args.plottop}
    extracted_configuration.display = not parsed_args.disable_display
    extracted_configuration.output_file = parsed_args.output
    extracted_configuration.min_time = parsed_args.min

    return extracted_configuration
