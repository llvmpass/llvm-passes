#! /usr/bin/env python3
import argparse
import glob
import json
import os
from shutil import copyfile

import plotter

'''
    This script is intended to reduce the size of the json files generated by llvm-lit.
    It takes a list of folders as arguments and then rewrite the json files in theses folders to only contain the
    benchmark names and their execution times.

    This purpose is to be able to push theses files without having a lot of information that are not relevant to our
    problem.
'''


def _main():
    """
    The main function
    """

    # Use of arg parser
    description = "Lighten the json files generated by llvm-lit to only keept the execution times and the size the " \
                  "text section of the code"
    arg_parser = argparse.ArgumentParser(description=description,
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    arg_parser.add_argument(dest="folders", nargs="*",
                            help="List of folders where json files will be read")
    arg_parser.add_argument("-d", "--destination",
                            help="If specified, the json files will be generated in the given folder. If not, they will"
                                 " be generated next to the original files with a name ending with _short.json. If"
                                 " used, must be used with -s")
    arg_parser.add_argument("-s", "--source",
                            help="Source folder for destination. Every json files in the source will be converted in"
                                 " the destination.")

    # Using the args to determine the behaviour

    # TODO : remove the usage with -d and -s because it is not that useful for the intented purpose.

    parsed_args = arg_parser.parse_args()

    if parsed_args.destination is None and parsed_args.source is None:
        rewrite_json_files_in_folder_in_place(parsed_args.folders)
    elif parsed_args.destination is not None and parsed_args.source is not None and len(parsed_args.folders) == 0:
        rewrite_jsons(parsed_args.destination, parsed_args.source)
    else:
        arg_parser.print_usage()


def rewrite_jsons(destination, source):
    """
    Rewrite every json files found recursively in the source folder in the destination folder keeping the same intern
    architecture.
    The json files are reduced by only keeping the benchmark names, the measured execution time and the size..text
    section. Found chosen_opt.txt files are also copied.
    :param destination: The destination folder
    :param source: The source folder that contains the data
    """
    abs_source = os.path.abspath(source)
    abs_dest = os.path.abspath(destination)

    for filename in glob.iglob(os.path.join(abs_source, "**/*.*"), recursive=True):
        if filename.endswith(".json"):
            final_action = rewrite_json_file
        elif os.path.basename(filename) == "chosen_opt.txt":
            final_action = make_dir_and_copy
        else:
            continue

        relative_filename = os.path.relpath(filename, abs_source)
        dest_filename = os.path.join(abs_dest, relative_filename)
        final_action(filename, dest_filename)


def rewrite_json_files_in_folder_in_place(folders):
    """
    Explores the given folders and creates a reduce json file ending with _short.json for every .json file found in the
    root of the folders
    :param folders: A list of folders in which every .json files will produce a _short.json version
    """
    for folder in folders:
        files_to_rewrite = glob.glob(os.path.join(os.path.abspath(folder), "*.json"))

        for file_to_rewrite in files_to_rewrite:
            # New file name is the same than the old one, but with _short.json replacing the 5 last letters
            rewrite_json_file(file_to_rewrite, file_to_rewrite[:-5] + "_short.json")


def make_dir_and_copy(source, destination):
    """
    Make the required directories for the destination file then copy the source file to the destination
    :param source: The source file
    :param destination: The destination file
    """
    os.makedirs(os.path.dirname(destination), exist_ok=True)
    copyfile(source, destination)


def rewrite_json_file(file_to_rewrite, destination):
    """
    Extract the relevant data from file_tor_rewrite and write them as the destination file (exec_time and size..text
    section for each test of the test-suite).
    :param file_to_rewrite: Source json file
    :param destination: Destination json file
    """
    json_file = json.load(open(file_to_rewrite))

    if 'tests' not in json_file:
        raise Exception("Tests was not found in the file {}".format(file_to_rewrite))

    new_json_file = {'tests': []}

    def copy_metric(dest, src, metric_name):
        if metric_name in src['metrics']:
            dest['metrics'][metric_name] = src['metrics'][metric_name]

    for benchmark in json_file['tests']:
        if plotter.is_a_valid_benchmark(benchmark):
            new_entry = {'name': benchmark['name'], 'metrics': {}}
            copy_metric(new_entry, benchmark, 'exec_time')
            copy_metric(new_entry, benchmark, 'size..text')

            new_json_file['tests'].append(new_entry)

    os.makedirs(os.path.dirname(destination), exist_ok=True)
    with open(destination, 'w') as outputfile:
        json.dump(new_json_file, outputfile)


if __name__ == '__main__':
    _main()
